(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{469:function(t,s,i){"use strict";i.r(s);var e=i(8),a=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1、position-absolute脱离文本流状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、position-absolute脱离文本流状态"}},[t._v("#")]),t._v(" 1、position:absolute脱离文本流状态")]),t._v(" "),s("p",[s("img",{attrs:{src:"assets/image-20241004233432064.png",alt:"image-20241004233432064"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"assets/image-20241004233523352.png",alt:"image-20241004233523352"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"assets/image-20241004233539973.png",alt:"image-20241004233539973"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"assets/image-20241004233602574.png",alt:"image-20241004233602574"}})]),t._v(" "),s("h2",{attrs:{id:"_2、box-sizing-border-box"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、box-sizing-border-box"}},[t._v("#")]),t._v(" 2、box-sizing: border-box;")]),t._v(" "),s("p",[t._v("box-sizing: border-box; 是一种 CSS 属性设置，它改变了元素的盒模型计算方式。使用这个属性后，元素的总宽度和高度将包括内边距（padding）和边框（border），而不是仅仅包含内容区域。这使得元素的尺寸更容易控制，特别是在设计响应式布局时。")]),t._v(" "),s("p",[t._v("简单来说，当你设置一个元素的宽度为 200px，并且给它添加了 20px 的内边距和 5px 的边框，使用 border-box 后，元素的总宽度依然是 200px，而内容区域会相应缩小，而不是超出设定的宽度。")]),t._v(" "),s("h2",{attrs:{id:"_3、transition-width-0-4s-ease"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、transition-width-0-4s-ease"}},[t._v("#")]),t._v(" 3、transition: width 0.4s ease;")]),t._v(" "),s("p",[s("code",[t._v("transition: width 0.4s ease-in-out;")]),t._v(" 是 CSS 中用于定义过渡效果的属性，具体解释如下：")]),t._v(" "),s("ol",[s("li",[s("strong",[s("code",[t._v("transition")])]),t._v(": 这是用于创建平滑过渡效果的属性，允许你定义元素属性变化的动画。")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("width")])]),t._v(": 指定要应用过渡效果的 CSS 属性。在这里，是元素的宽度。")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("0.4s")])]),t._v(": 过渡持续时间，单位为秒。在这个例子中，元素的宽度变化将在 0.4 秒内完成。")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("ease-in-out")])]),t._v(": 这是过渡的时间函数，定义了动画速度的变化方式。"),s("code",[t._v("ease-in-out")]),t._v(" 意味着动画开始和结束时的速度较慢，中间加速，这样的效果更加自然。")])]),t._v(" "),s("h3",{attrs:{id:"其他相关知识点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他相关知识点"}},[t._v("#")]),t._v(" 其他相关知识点：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("其他时间函数")]),t._v(":\n"),s("ul",[s("li",[s("code",[t._v("linear")]),t._v(": 速度保持一致。")]),t._v(" "),s("li",[s("code",[t._v("ease")]),t._v(": 初始慢，随后加速，最后减速。")]),t._v(" "),s("li",[t._v("自定义贝塞尔曲线，如 "),s("code",[t._v("cubic-bezier(0.25, 0.1, 0.25, 1)")]),t._v("，可以更细致地控制动画的速度变化。")])])]),t._v(" "),s("li",[s("strong",[t._v("多个属性过渡")]),t._v(": 可以同时过渡多个属性，如 "),s("code",[t._v("transition: width 0.4s ease-in-out, height 0.4s ease-in-out;")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("过渡状态")]),t._v(": 可以通过伪类（如 "),s("code",[t._v(":hover")]),t._v("、"),s("code",[t._v(":focus")]),t._v("）来触发过渡效果。")]),t._v(" "),s("li",[s("strong",[t._v("初始状态")]),t._v(": 通常，设置一个初始状态（如通过 "),s("code",[t._v("width: 100px;")]),t._v("），再通过 JavaScript 或 CSS 改变状态，以便触发过渡。")])]),t._v(" "),s("p",[t._v("使用过渡效果可以使用户体验更加流畅和直观，是现代网页设计的重要组成部分。")]),t._v(" "),s("p",[t._v("![alt text](<assets/241008 161146.gif>)")])])}),[],!1,null,null,null);s.default=a.exports}}]);